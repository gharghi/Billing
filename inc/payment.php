<?php$DBP = new database;$DBP->Select('setting', '*', 'id = 1');/////////////////////////////////////define('payment_text', $DBP->Select_Result[0]["payment_text"]);define('mellat_terminalId', $DBP->Select_Result[0]["mellat_terminalId"]);define('mellat_userName', $DBP->Select_Result[0]["mellat_userName"]);define('mellat_userPassword', $DBP->Select_Result[0]["mellat_userPassword"]);define('parsian_PIN', $DBP->Select_Result[0]["parsian_PIN"]);define('callBackUrl', $DBP->Select_Result[0]['site_URL'] . '/verifyPayment.php?');define('pasargad_merchant', $DBP->Select_Result[0]['pasargad_merchant']);define('pasargad_terminal', $DBP->Select_Result[0]['pasargad_terminal']);define('pasargad_key', $DBP->Select_Result[0]['pasargad_key']);//////////////////////////////////////////require_once('nusoap.php');function SEND_DATA_TO_MELLAT($amount = 0, $orderId, $credit = 0){    $callBackUrl = callBackUrl . "gateway=mellat&price=" . $amount . "&orderId=" . $orderId . "&cr=" . $credit;    $client = new nusoap_client('https://bpm.shaparak.ir/pgwchannel/services/pgw?wsdl');    $namespace = 'http://interfaces.core.sw.bps.com/';    $terminalId = mellat_terminalId;    $userName = mellat_userName;    $userPassword = mellat_userPassword;    $date = date("ymd");    $time = date("His");    $localDate = $date;    $localTime = $time;    $additionalData = '';    $payerId = '0';    $parameters = array('terminalId' => $terminalId, 'userName' => $userName, 'userPassword' => $userPassword, 'orderId' => $orderId, 'amount' => $amount, 'localDate' => $localDate, 'localTime' => $localTime, 'additionalData' => $additionalData, 'callBackUrl' => $callBackUrl, 'payerId' => $payerId);    // Call the SOAP method    $result = $client->call('bpPayRequest', $parameters, $namespace);    // Check for a fault    if ($client->fault) {        //print_r($result);        die("khata");    } else {        // Check for errors        $resultStr = $result;        $err = $client->getError();        if ($err) {            $this->msg['class'] = 'error';            $err;        } else {            // Display the result            $res = explode(',', $resultStr);            $ResCode = $res[0];            if ($ResCode == "0") {                $send_atu = "<script language='JavaScript' type='text/javascript'>				<!--				document.getElementById('checkout_confirmation').submit();				//-->				</script>";                echo '					  <form id="checkout_confirmation" method="post" action="https://bpm.shaparak.ir/pgwchannel/startpay.mellat" style="margin:0px"  >					  <input type="hidden"  name="RefId" value="' . $res[1] . '" />					  <input type="submit" value="در صورت عدم انتقال اينجا کليک کنيد"  />					  </form>' . $send_atu;            } else {                displayError("error", "خطا در ارسال اطلاعات به بانک<br> خطا : " . mellatError($ResCode) . "<br/> شماره پیگیری : " . $orderId);            }        }// end Display the result    }// end Check for errors}function SEND_DATA_TO_PEC24($amount, $payforid, $credit = 0){    $orderId = $payforid;    $soapclient = new nusoap_client('https://pec.shaparak.ir/pecpaymentgateway/eshopservice.asmx?wsdl', 'wsdl');    if (!$err = $soapclient->getError()) $soapProxy = $soapclient->getProxy();    if ((!$soapclient) or ($err = $soapclient->getError())) die($err . "<br>"); else {        $amount = intval($amount);  // here is the posted amount        $authority = 0;  // default authority        $status = 1;    // default status        $callBackUrl = callBackUrl . "gateway=parsian&price=" . $amount . "&orderId=" . $orderId . "&cr=" . $credit;        $params = array('pin' => parsian_PIN,  // this is our PIN NUMBER            'amount' => $amount, 'orderId' => $orderId, 'callbackUrl' => $callBackUrl, 'authority' => $authority, 'status' => $status);        $sendParams = array($params);        $res = $soapclient->call('PinPaymentRequest', $sendParams);        $authority = $res['authority'];        $status = $res['status'];        CHECK_Parsian_STATE_ERROR($status);        if (($authority) and ($status == 0)) {            $parsURL = "https://pec.shaparak.ir/pecpaymentgateway/?au=" . $authority;            echo "<script> location.href='$parsURL'; </script>";            die();        } else {            if ($err = $soapclient->getError()) {                echo "ERROR = $err <br>";                return false;            }        }    }    // SHOW HTML PART}function SEND_DATA_TO_PASARGAD($amount, $orderId, $credit = 0){    $processor = new RSAProcessor(pasargad_key);    $merchantCode = pasargad_merchant; // كد پذيرنده    $terminalCode = pasargad_terminal; // كد ترمينال    $redirectAddress = callBackUrl . "gateway=pasargad&price=" . $amount . "&orderId=" . $orderId . "&cr=" . $credit;    $invoiceNumber = $orderId; //شماره فاكتور    $timeStamp = date("Y/m/d H:i:s");    $invoiceDate = date("Y/m/d H:i:s"); //تاريخ فاكتور    $action = "1003";    // 1003 : براي درخواست خريد    $data = "#" . $merchantCode . "#" . $terminalCode . "#" . $invoiceNumber . "#" . $invoiceDate . "#" . $amount . "#" . $redirectAddress . "#" . $action . "#" . $timeStamp . "#";    $data = sha1($data, true);    $data = $processor->sign($data); // امضاي ديجيتال    $result = base64_encode($data); // base64_encode    echo "	<form name='pasargad' Method='post' Action='https://pep.shaparak.ir/gateway.aspx'>	<input type='hidden' name='invoiceNumber' value='" . $invoiceNumber . "' />	<input type='hidden' name='invoiceDate' value='" . $invoiceDate . "' />	<input type='hidden' name='amount' value='" . $amount . "' />	<input type='hidden' name='terminalCode' value='" . $terminalCode . "' />	<input type='hidden' name='merchantCode' value='" . $merchantCode . "' />	<input type='hidden' name='redirectAddress' value='" . $redirectAddress . "' />	<input type='hidden' name='timeStamp' value='" . $timeStamp . "' />	<input type='hidden' name='action' value='" . $action . "' />	<input type='hidden' name='sign' value='" . $result . "' />	<input type='submit'  value='برای انتقال به بانک کلیک کنید' />	</form>";    echo "<script>		  	document.pasargad.submit();		  </script>";    die();}##--------------------------------------------------------------------------CHECK_STATE_ERRORfunction CHECK_Parsian_STATE_ERROR($status){    switch ($status) {        case '0' :            break;        case '20' :            break;        case '22' :            displayError("error", "پين فروشنده درست نميباشد.");            break;        case '30' :            displayError("error", "عمليات قبلا با موفقيت انجام شده است.");            break;        case '34' :            displayError("error", "شماره تراکنش فروشنده درست نميباشد.");            break;        default :            displayError("error", "خطاي نامشخص [ شماره :$status ]");    }    return true;}function mellatError($ecode){    switch ($ecode) {        case 0:            $tmess = "تراکنش با موفقیت انجام شد";            break;        case 11:            $tmess = "شماره کارت معتبر نیست";            break;        case 12:            $tmess = "موجودی کافی نیست";            break;        case 13:            $tmess = "رمز دوم شما صحیح نیست";            break;        case 14:            $tmess = "دفعات مجاز ورود رمز بیش از حد است";            break;        case 15:            $tmess = "کارت معتبر نیست";            break;        case 16:            $tmess = "دفعات برداشت وجه بیش از حد مجاز است";            break;        case 17:            $tmess = "کاربر از انجام تراکنش منصرف شده است";            break;        case 18:            $tmess = "تاریخ انقضای کارت گذشته است";            break;        case 19:            $tmess = "مبلغ برداشت وجه بیش از حد مجاز است";            break;        case 111:            $tmess = "صادر کننده کارت نامعتبر است";            break;        case 112:            $tmess = "خطای سوییچ صادر کننده کارت";            break;        case 113:            $tmess = "پاسخی از صادر کننده کارت دریافت نشد";            break;        case 114:            $tmess = "دارنده کارت مجاز به انجام این تراکنش نمی باشد";            break;        case 21:            $tmess = "پذیرنده معتبر نیست";            break;        case 23:            $tmess = "خطای امنیتی رخ داده است";            break;        case 24:            $tmess = "اطلاعات کاربری پذیرنده معتبر نیست";            break;        case 25:            $tmess = "مبلغ نامعتبر است";            break;        case 31:            $tmess = "پاسخ نامعتبر است";            break;        case 32:            $tmess = "فرمت اطلاعات وارد شده صحیح نیست";            break;        case 33:            $tmess = "حساب نامعتبر است";            break;        case 34:            $tmess = "خطای سیستمی";            break;        case 35:            $tmess = "تاریخ نامعتبر است";            break;        case 41:            $tmess = "شماره درخواست تکراری است";            break;        case 42:            $tmess = "تراکنش Sale یافت نشد";            break;        case 43:            $tmess = "قبلا درخواست Verify داده شده است";            break;        case 44:            $tmess = "درخواست Verify یافت نشد";            break;        case 45:            $tmess = "تراکنش Settle شده است";            break;        case 46:            $tmess = "تراکنش Settle نشده است";            break;        case 47:            $tmess = "تراکنش Settle یافت نشد";            break;        case 48:            $tmess = "تراکنش Reverse شده است";            break;        case 49:            $tmess = "تراکنش Refund یافت نشد";            break;        case 412:            $tmess = "شناسه قبض نادرست است";            break;        case 413:            $tmess = "شناسه پرداخت نادرست است";            break;        case 414:            $tmess = "سازمان صادر کننده قبض معتبر نیست";            break;        case 415:            $tmess = "زمان جلسه کاری به پایان رسیده است";            break;        case 416:            $tmess = "خطا در ثبت اطلاعات";            break;        case 417:            $tmess = "شناسه پرداخت کننده نامعتبر است";            break;        case 418:            $tmess = "اشکال در تعریف اطلاعات مشتری";            break;        case 419:            $tmess = "تعداد دفعات ورود اطلاعات بیش از حد مجاز است";            break;        case 421:            $tmess = "IP معتبر نیست";            break;        case 51:            $tmess = "تراکنش تکراری است";            break;        case 54:            $tmess = "تراکنش مرجع موجود نیست";            break;        case 55:            $tmess = "تراکنش نامعتبر است";            break;        case 61:            $tmess = "خطا در واریز";        case 500:            $tmess = "ارجاع به سایت بانک،عدم پاسخ";            break;    }    return $tmess;}//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//****************************______________________VERIFY_PROCCESfunction VERIFY_PROCCES_Parsian($authority){  //  this function is to Validate Payment    if ($authority) {        $soapclient = new nusoap_client('https://pec.shaparak.ir/pecpaymentgateway/eshopservice.asmx?wsdl', 'wsdl');        if ((!$soapclient) or ($err = $soapclient->getError())) {            echo "Error: $err<br>";            return false;        } else {            $status = 1;   // default status            $params = array('pin' => parsian_PIN, // this is our PIN NUMBER                'authority' => $authority, 'status' => $status); // to see if we can change it            $sendParams = array($params);            $res = $soapclient->call('PinPaymentEnquiry', $sendParams);            $status = $res['status'];            CHECK_Parsian_STATE_ERROR($status);            if ($status == 0) return true; else {                //echo "this is a UNsucccessfull payment<br>we update our DataBase <br>Couldn't Validate Payment with Parsian";                return false;            }        }    } else {        //echo "this is a UNsucccessfull payment [XX9]";        return false;    }    return false;}//**************************************************************************************______________________VERIFY_PROCCESfunction VERIFY_PROCCES_MELLAT($OrderId, $SaleOrderId, $SaleReferenceId){  //  this function is to Validate Payment    $client2 = new nusoap_client('https://bpm.shaparak.ir/pgwchannel/services/pgw?wsdl');    $namespace = 'http://interfaces.core.sw.bps.com/';    $err = $client2->getError();    if ($err) {        echo $err;        return false;        //die();    }    $parameters = array('terminalId' => mellat_terminalId, 'userName' => mellat_userName, 'userPassword' => mellat_userPassword, 'orderId' => $OrderId, 'saleOrderId' => $SaleOrderId, 'saleReferenceId' => $SaleReferenceId);    $result = $client2->call('bpVerifyRequest', $parameters, $namespace);    if ($client2->fault) {        echo displayError('error', 'خطا در انجام عملیات رخ داده است');        return false;        //die();    } else {        $resultStr = $result;        $err = $client2->getError();        if ($err) return false; else  return true;    }}//**************************************************************************************SETTEL_PROCCESfunction SETTEL_PROCCES_MELLAT($OrderId, $SaleOrderId, $SaleReferenceId){  //  this function is to SETTEL_PROCCES Payment    $client = new nusoap_client('https://bpm.shaparak.ir/pgwchannel/services/pgw?wsdl');    $namespace = 'http://interfaces.core.sw.bps.com/';    $err = $client->getError();    if ($err) {        echo $err;        return false;        //die();    }    $parameters = array('terminalId' => mellat_terminalId, 'userName' => mellat_userName, 'userPassword' => mellat_userPassword, 'orderId' => $OrderId, 'saleOrderId' => $SaleOrderId, 'saleReferenceId' => $SaleReferenceId);    // Call the SOAP method    $result = $client->call('bpSettleRequest', $parameters, $namespace);    if ($client->fault) {        echo 'Fault';        return false;        //        //die();    } else {        $resultStr = $result;        $err = $client->getError();        if ($err) return false; else  return true;    }}//***************************************************Verify Pasargadfunction VERIFY_PASARGAD($refId, $orderId, $indate, $amount){  //  this function is to Validate Payment    $fields = array('invoiceUID' => $_GET['tref']);    $result = post2https($fields, 'https://pep.shaparak.ir/CheckTransactionResult.aspx');    $array = makeXMLTree($result);    if ($array['resultObj']['result'] == TRUE && $array['resultObj']['action'] == 1003 && $array['resultObj']['transactionReferenceID'] == $refId && $array['resultObj']['invoiceNumber'] == $orderId) {        $fields = array('MerchantCode' => pasargad_merchant,            //shomare ye moshtari e shoma.            'TerminalCode' => pasargad_terminal,            //shomare ye terminal e shoma.            'InvoiceNumber' => $orderId,                    //shomare ye factor tarakonesh.            'InvoiceDate' => $indate,                        //tarikh e tarakonesh.            'amount' => (int)$amount,                        //mablagh e tarakonesh. faghat adad.            'TimeStamp' => date("Y/m/d H:i:s"),            //zamane jari ye system.            'sign' => ''                                    //reshte ye ersali ye code shode. in mored automatic por mishavad.        );        $processor = new RSAProcessor(pasargad_key);        $data = "#" . $fields['MerchantCode'] . "#" . $fields['TerminalCode'] . "#" . $fields['InvoiceNumber'] . "#" . $fields['InvoiceDate'] . "#" . $fields['amount'] . "#" . $fields['TimeStamp'] . "#";        $data = sha1($data, true);        $data = $processor->sign($data);        $fields['sign'] = base64_encode($data); // base64_encode        $verifyresult = post2https($fields, 'https://pep.shaparak.ir/VerifyPayment.aspx');        $array = makeXMLTree($verifyresult);        if ($array['actionResult']['result'] == true) {            return true;        } else {            return false;        }    }}//***************************************************Settel Pasargadfunction SETTEL_PASARGAD($OrderId, $SaleOrderId, $SaleReferenceId){  //  this function is to SETTEL_PROCCES Payment    $client = new nusoap_client('https://bpm.shaparak.ir/pgwchannel/services/pgw?wsdl');    $namespace = 'http://interfaces.core.sw.bps.com/';    $err = $client->getError();    if ($err) {        echo $err;        return false;        //die();    }    $parameters = array('terminalId' => mellat_terminalId, 'userName' => mellat_userName, 'userPassword' => mellat_userPassword, 'orderId' => $OrderId, 'saleOrderId' => $SaleOrderId, 'saleReferenceId' => $SaleReferenceId);    // Call the SOAP method    $result = $client->call('bpSettleRequest', $parameters, $namespace);    if ($client->fault) {        echo 'Fault';        return false;        //        //die();    } else {        $resultStr = $result;        $err = $client->getError();        if ($err) return false; else  return true;    }}//##########################Pasargad Classes################################define("BCCOMP_LARGER", 1);class RSA{    function rsa_encrypt($message, $public_key, $modulus, $keylength)    {        $padded = RSA::add_PKCS1_padding($message, true, $keylength / 8);        $number = RSA::binary_to_number($padded);        $encrypted = RSA::pow_mod($number, $public_key, $modulus);        $result = RSA::number_to_binary($encrypted, $keylength / 8);        return $result;    }    function add_PKCS1_padding($data, $isPublicKey, $blocksize)    {        $pad_length = $blocksize - 3 - strlen($data);        if ($isPublicKey) {            $block_type = "\x02";            $padding = "";            for ($i = 0; $i < $pad_length; $i++) {                $rnd = mt_rand(1, 255);                $padding .= chr($rnd);            }        } else {            $block_type = "\x01";            $padding = str_repeat("\xFF", $pad_length);        }        return "\x00" . $block_type . $padding . "\x00" . $data;    }    function binary_to_number($data)    {        $base = "256";        $radix = "1";        $result = "0";        for ($i = strlen($data) - 1; $i >= 0; $i--) {            $digit = ord($data{$i});            $part_res = bcmul($digit, $radix);            $result = bcadd($result, $part_res);            $radix = bcmul($radix, $base);        }        return $result;    }    function pow_mod($p, $q, $r)    {        $factors = array();        $div = $q;        $power_of_two = 0;        while (bccomp($div, "0") == BCCOMP_LARGER) {            $rem = bcmod($div, 2);            $div = bcdiv($div, 2);            if ($rem) array_push($factors, $power_of_two);            $power_of_two++;        }        $partial_results = array();        $part_res = $p;        $idx = 0;        foreach ($factors as $factor) {            while ($idx < $factor) {                $part_res = bcpow($part_res, "2");                $part_res = bcmod($part_res, $r);                $idx++;            }            array_push($partial_results, $part_res);        }        $result = "1";        foreach ($partial_results as $part_res) {            $result = bcmul($result, $part_res);            $result = bcmod($result, $r);        }        return $result;    }    function number_to_binary($number, $blocksize)    {        $base = "256";        $result = "";        $div = $number;        while ($div > 0) {            $mod = bcmod($div, $base);            $div = bcdiv($div, $base);            $result = chr($mod) . $result;        }        return str_pad($result, $blocksize, "\x00", STR_PAD_LEFT);    }    function rsa_sign($message, $private_key, $modulus, $keylength)    {        $padded = RSA::add_PKCS1_padding($message, false, $keylength / 8);        $number = RSA::binary_to_number($padded);        $signed = RSA::pow_mod($number, $private_key, $modulus);        $result = RSA::number_to_binary($signed, $keylength / 8);        return $result;    }    function rsa_verify($message, $public_key, $modulus, $keylength)    {        return RSA::rsa_decrypt($message, $public_key, $modulus, $keylength);    }    function rsa_decrypt($message, $private_key, $modulus, $keylength)    {        $number = RSA::binary_to_number($message);        $decrypted = RSA::pow_mod($number, $private_key, $modulus);        $result = RSA::number_to_binary($decrypted, $keylength / 8);        return RSA::remove_PKCS1_padding($result, $keylength / 8);    }    function remove_PKCS1_padding($data, $blocksize)    {        assert(strlen($data) == $blocksize);        $data = substr($data, 1);        if ($data{0} == '\0') die("Block type 0 not implemented.");        assert(($data{0} == "\x01") || ($data{0} == "\x02"));        $offset = strpos($data, "\0", 1);        return substr($data, $offset + 1);    }    function rsa_kyp_verify($message, $public_key, $modulus, $keylength)    {        $number = RSA::binary_to_number($message);        $decrypted = RSA::pow_mod($number, $public_key, $modulus);        $result = RSA::number_to_binary($decrypted, $keylength / 8);        return RSA::remove_KYP_padding($result, $keylength / 8);    }    function remove_KYP_padding($data, $blocksize)    {        assert(strlen($data) == $blocksize);        $offset = strpos($data, "\0");        return substr($data, 0, $offset);    }}class RSAProcessor{    private $public_key = null;    private $private_key = null;    private $modulus = null;    private $key_length = "1024";    public function __construct($xmlRsakey)    {        $xmlObj = simplexml_load_string($xmlRsakey);        $this->modulus = RSA::binary_to_number(base64_decode($xmlObj->Modulus));        $this->public_key = RSA::binary_to_number(base64_decode($xmlObj->Exponent));        $this->private_key = RSA::binary_to_number(base64_decode($xmlObj->D));        $this->key_length = strlen(base64_decode($xmlObj->Modulus)) * 8;    }    public function getPublicKey()    {        return $this->public_key;    }    public function getPrivateKey()    {        return $this->private_key;    }    public function getKeyLength()    {        return $this->key_length;    }    public function getModulus()    {        return $this->modulus;    }    public function encrypt($data)    {        return base64_encode(RSA::rsa_encrypt($data, $this->public_key, $this->modulus, $this->key_length));    }    public function dencrypt($data)    {        return RSA::rsa_decrypt($data, $this->private_key, $this->modulus, $this->key_length);    }    public function sign($data)    {        return RSA::rsa_sign($data, $this->private_key, $this->modulus, $this->key_length);    }    public function verify($data)    {        return RSA::rsa_verify($data, $this->public_key, $this->modulus, $this->key_length);    }}class RSAKeyType{    const XMLFile = 0;    const XMLString = 1;}function makeXMLTree($data){    $ret = array();    $parser = xml_parser_create();    xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);    xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);    xml_parse_into_struct($parser, $data, $values, $tags);    xml_parser_free($parser);    $hash_stack = array();    foreach ($values as $key => $val) {        switch ($val['type']) {            case 'open':                array_push($hash_stack, $val['tag']);                break;            case 'close':                array_pop($hash_stack);                break;            case 'complete':                array_push($hash_stack, $val['tag']);                // uncomment to see what this function is doing                // echo("\$ret[" . implode($hash_stack, "][") . "] = '{$val[value]}';\n");                eval("\$ret[" . implode($hash_stack, "][") . "] = '{$val[value]}';");                array_pop($hash_stack);                break;        }    }    return $ret;}/* ------------------------------------- CURL POST TO HTTPS --------------------------------- */function post2https($fields_arr, $url){    //url-ify the data for the POST    $fields_string = '';    foreach ($fields_arr as $key => $value) {        $fields_string .= $key . '=' . $value . '&';    }    $fields_string = substr($fields_string, 0, -1);    //open connection    $ch = curl_init();    //set the url, number of POST vars, POST data    curl_setopt($ch, CURLOPT_URL, $url);    curl_setopt($ch, CURLOPT_POST, count($fields_arr));    curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);    //execute post    $res = curl_exec($ch);    //close connection    curl_close($ch);    return $res;}function checkDuplicate($resnum, $refnum){    $DB = new database;    $DB->Select('payment', 'id', 'refnum = ' . $refnum . ' or ( resnum = ' . $resnum . ' and status = 1 )');    if ($DB->Select_Rows == 0) {        return true;    } else return false;    return true;}?>